generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URI")
}

type PurchasemodelsOrderItems {
  id       String  @map("_id") @db.ObjectId
  image    String?
  name     String?
  price    Int
  product  String  @db.ObjectId
  quantity Int
}

type PurchasemodelsPaymentInfo {
  id     String
  status String
}

type PurchasemodelsShippingInfo {
  address String
  city    String
  country String
  phoneNo Float
  pinCode Int
  state   String
}

type SalesmodelsOrderItems {
  id       String  @map("_id") @db.ObjectId
  image    String?
  name     String?
  price    Int
  product  String  @db.ObjectId
  quantity Int
}

type SalesmodelsPaymentInfo {
  id     String
  status String
}

type SalesmodelsShippingInfo {
  address String
  city    String
  country String
  phoneNo Float
  pinCode Int
  state   String
}

model Admin {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  v             Int      @map("__v")
  createdAt     DateTime @db.Date
  email         String   @unique(map: "email_1")
  name          String
  password      String
  role          String   @default("admin")
  subscriptions DateTime @db.Date

  @@map("admins")
}

model Agent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  createdAt   DateTime @db.Date
  email       String   @unique(map: "email_1")
  name        String
  password    String
  /// Multiple data types found: Float: 55.6%, Int: 44.4% out of 9 sampled entries
  phoneNumber String   @unique(map: "phoneNumber_1")
  updatedAt   DateTime @db.Date

  @@map("agents")
}

model Consumer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  v           Int      @map("__v")
  createdAt   DateTime @db.Date
  email       String   @unique(map: "email_1")
  name        String
  password    String
  /// Multiple data types found: Float: 66.7%, Int: 33.3% out of 9 sampled entries
  phoneNumber String
  role        String

  @@map("consumers")
}

enum PaymentMode {
  CASH
  BANK_TRANSFER
  CREDIT
  SETTLE
}

model Expense {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  v             Int         @map("__v")
  amount        Int
  createdAt     DateTime    @db.Date
  description   String?
  header        String
  modeOfPayment PaymentMode
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId

  @@map("expensemodels")
}

model Income {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  v             Int         @map("__v")
  amount        Int
  createdAt     DateTime    @db.Date
  header        String      @unique(map: "header_1")
  modeOfPayment PaymentMode
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId

  @@map("incomemodels")
}

model Inventory {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  CGST              Float?
  GSTRate           Int?
  IGST              Float?
  SGST              Float?
  v                 Int       @map("__v")
  barCode           String?
  /// Multiple data types found: Float: 80%, Int: 20% out of 10 sampled entries
  basePurchasePrice Json?
  baseSellingPrice  Float?
  clicks            Int?
  createdAt         DateTime  @db.Date
  expiryDate        DateTime? @db.Date
  image             String?
  name              String
  netSellingPrice   Float?
  /// Multiple data types found: Float: 90%, Int: 10% out of 10 sampled entries
  purchaseCGST      Json?
  /// Multiple data types found: Float: 80%, Int: 20% out of 10 sampled entries
  purchaseIGST      Json?
  purchasePrice     Int?
  /// Multiple data types found: Float: 90%, Int: 10% out of 10 sampled entries
  purchaseSGST      Json?
  quantity          Int
  saleCGST          Float?
  saleIGST          Float?
  saleSGST          Float?
  sellingPrice      Int
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @db.ObjectId

  @@map("inventories")
}

model otpmodels {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  createdAt Json?
  otp       String

  @@index([createdAt], map: "createdAt_1")
}

model Party {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  v              Int        @map("__v")
  address        String?
  createdAt      DateTime   @db.Date
  name           String     @unique(map: "name_1")
  /// Multiple data types found: Float: 54.3%, Int: 45.7% out of 94 sampled entries
  phoneNumber    Json
  type           PartyType
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @db.ObjectId
  purchasemodels Purchase[]
  salesmodels    Sale[]

  @@map("parties")
}

enum PartyType {
  SUPPLIER
  CUSTOMER
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  GSTRate      Int
  v            Int         @map("__v")
  barCode      String
  createdAt    DateTime    @db.Date
  image        String
  name         String
  sellingPrice Int
  expiryDate   DateTime    @db.Date
  OrderItem    OrderItem[]

  @@map("products")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Int
  quantity  Int
  image     String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Purchase {
  id            String                     @id @default(auto()) @map("_id") @db.ObjectId
  v             Int?                       @map("__v")
  createdAt     DateTime?                  @db.Date
  modeOfPayment PaymentMode
  orderItems    PurchasemodelsOrderItems[]
  party         Party                      @relation(fields: [partyId], references: [id])
  total         Int?
  partyId       String                     @db.ObjectId
  userId        String                     @db.ObjectId
  User          User                       @relation(fields: [userId], references: [id])

  @@map("purchasemodels")
}

model Sale {
  id            String                     @id @default(auto()) @map("_id") @db.ObjectId
  v             Int?                       @map("__v")
  createdAt     DateTime?                  @db.Date
  modeOfPayment PaymentMode
  orderItems    PurchasemodelsOrderItems[]
  party         Party                      @relation(fields: [partyId], references: [id])
  total         Int?
  partyId       String                     @db.ObjectId
  userId        String                     @db.ObjectId
  User          User                       @relation(fields: [userId], references: [id])

  @@map("salesmodels")
}

model SubscribedUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @db.Date
  email       String   @unique(map: "email_1")
  expireAt    DateTime @db.Date
  phoneNumber Float    @unique(map: "phoneNumber_1")

  @@index([expireAt], map: "expireAt_1")
  @@map("subscribedusers")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  GstIN          String?
  v              Int         @map("__v")
  address        String?
  businessName   String?
  businessType   String?
  clicks         Int?
  createdAt      DateTime    @db.Date
  email          String      @unique(map: "email_1")
  image          String?
  name           String?
  password       String
  /// Multiple data types found: Float: 83.6%, Int: 16.4% out of 146 sampled entries
  phoneNumber    Json?
  referredBy     String?
  role           String
  taxFile        String?
  updatedAt      DateTime?   @db.Date
  Expense        Expense[]
  Income         Income[]
  Inventory      Inventory[]
  Party          Party[]
  purchasemodels Purchase[]
  salesmodels    Sale[]

  @@map("users")
}
